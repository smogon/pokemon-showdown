#!/usr/bin/env node
'use strict';
// Before running, ensure that the Typescript files have been compiled.
//
// Simply doing `require('../build')` here doesn't work because the `replace`
// step of the build is asynchronous and we can't wait for it to finish easily
// unless we shell out and use `execSync`. However, the heuristic of simply
// checking for the presence of './dist/sim/dex' to determine whether a build
// is required is somewhat risky as it only is valid from a clean repository -
// if you make edits or have previous build artifacts lying around, this
// script could potentially be missing additional sources or the compiled output
// may be out of date.
//
// We're OK with risking being stale here unless we're starting the server
// because we want to keep this script as fast as possible to be usable as a way
// of interfacing with the simulator from non-JS languages. Otherwise we error
// on the side of caution and run `node build` to ensure we're always running
// with the latest code.
const fs = require('fs');
const util = require('util');

function build() {
	if (cli.values['skip-build']) return;
	require('child_process').execSync('node build', { stdio: 'inherit', cwd: __dirname });
}

function readTeam(stream) {
	return stream.readLine().then(line => {
		if (line.startsWith('[') || line.includes('|')) return line;
		return stream.readAll().then(all => (line + '\n' + all));
	});
}

function ensureBuilt() {
	if (!fs.existsSync('./dist')) {
		build();
	}
}

function showHelp() {
	console.log('pokemon-showdown start [--skip-build] [PORT]');
	console.log('');
	console.log('  Starts a PS server on the specified port');
	console.log('  (Defaults to the port setting in config/config.js)');
	console.log('  (The port setting in config/config.js defaults to 8000)');
	console.log('');
	console.log('pokemon-showdown generate-team [FORMAT-ID] [RANDOM-SEED]');
	console.log('');
	console.log('  Generates a random team, and writes it to stdout in packed team format');
	console.log('  (Format defaults to the latest Random Battles format)');
	console.log('');
	console.log('pokemon-showdown validate-team [FORMAT-ID]');
	console.log('');
	console.log('  Reads a team from stdin, and validates it');
	console.log('  If valid: exits with code 0');
	console.log('  If invalid: writes errors to stderr, exits with code 1');
	console.log('');
	console.log('pokemon-showdown simulate-battle');
	console.log('');
	console.log('  Simulates a battle, taking input to stdin and writing output to stdout');
	console.log('  Protocol is documented in ./dist/sim/README.md');
	console.log('');
	console.log('pokemon-showdown json-team');
	console.log('');
	console.log('  Reads a team in any format from stdin, writes the unpacked JSON to stdout');
	console.log('');
	console.log('pokemon-showdown pack-team');
	console.log('');
	console.log('  Reads a team in any format from stdin, writes the packed team to stdout');
	console.log('');
	console.log('pokemon-showdown export-team');
	console.log('');
	console.log('  Reads a team in any format from stdin, writes the exported (human-readable) team to stdout');
	console.log('');
	console.log('pokemon-showdown help');
	console.log('');
	console.log('  Displays this reference');
}

try {
	// eslint-disable-next-line no-unused-expressions
	fetch;
} catch {
	// fetch was introduced in Node 18, which is EOL,
	// so we'll ask for the most recent "Active LTS" with it to be safe
	// https://nodejs.org/en/about/previous-releases
	console.error("We require Node.js version 22 or later; you're using " + process.version);
	process.exit(1);
}

const cliOpts = {
	help: {
		type: 'boolean',
		short: 'h',
		default: false,
	},
	'skip-build': {
		type: 'boolean',
		default: false,
	},
	debug: {
		type: 'boolean',
		short: 'D',
		default: false,
	},
	replay: {
		type: 'boolean',
		short: 'R',
		default: false,
	},
	spectate: {
		type: 'boolean',
		short: 'S',
		default: false,
	},
};

const parserOpts = {
	options: cliOpts,
	strict: false,
	allowPositionals: true,
	allowNegative: false,
};

const cli = util.parseArgs(parserOpts);

if (cli.values['help']) {
	showHelp();
	process.exit(0);
}

if (!cli.positionals.length || /^[0-9]+$/.test(cli.positionals[0])) {
	// Start the server.
	//
	// The port the server should host on can be passed as an argument, e.g. to
	// host on port 9000:
	// $ ./pokemon-showdown 9000
	build();
	require('module')._load('./dist/server/index.js', module, true);
} else {
	switch (cli.positionals[0]) {
	case 'help':
	case 'h':
	case '?':
	{
		showHelp();
		break;
	}
	case 'start':
	{
		build();
		require('module')._load('./dist/server/index.js', module, true);
		break;
	}
	case 'generate-team':
		{
			ensureBuilt();
			const Teams = require('./dist/sim/teams.js').Teams;
			const seed = cli.positionals[2] || undefined;
			console.log(Teams.pack(Teams.generate(cli.positionals[1], { seed })));
		}
		break;
	case 'validate-team':
		{
			ensureBuilt();
			require('source-map-support/register');
			const Teams = require('./dist/sim/teams.js').Teams;
			const TeamValidator = require('./dist/sim/team-validator.js').TeamValidator;
			const validator = TeamValidator.get(cli.positionals[1]);
			const Streams = require('./dist/lib/streams.js');
			const stdin = Streams.stdin();

			readTeam(stdin).then(textTeam => {
				try {
					const team = Teams.import(textTeam);
					const result = validator.validateTeam(team);
					if (result) {
						console.error(result.join('\n'));
						process.exit(1);
					}
					process.exit(0);
				} catch (e) {
					console.error(e);
					process.exit(1);
				}
			});
		}
		break;
	case 'simulate-battle':
		{
			build();
			const BattleTextStream = require('./dist/sim/battle-stream.js').BattleTextStream;
			const Streams = require('./dist/lib/streams');
			const stdin = Streams.stdin();
			const stdout = Streams.stdout();

			const battleStream = new BattleTextStream({
				noCatch: true,
				debug: cli.values['debug'],
				replay: cli.values['spectate'] ? 'spectator' : cli.values['replay'],
			});
			stdin.pipeTo(battleStream);
			battleStream.pipeTo(stdout);
		}
		break;
	case 'unpack-team':
	case 'json-team':
		{
			build();
			const Teams = require('./dist/sim/teams').Teams;
			const Streams = require('./dist/lib/streams');
			const stdin = Streams.stdin();

			readTeam(stdin).then(team => {
				try {
					const unpackedTeam = Teams.unpack(Teams.import(team));
					console.log(JSON.stringify(unpackedTeam));
					process.exit(0);
				} catch (e) {
					console.error(e);
					process.exit(1);
				}
			});
		}
		break;
	case 'pack-team':
		{
			build();
			const Teams = require('./dist/sim/teams').Teams;
			const Streams = require('./dist/lib/streams');
			const stdin = Streams.stdin();

			readTeam(stdin).then(team => {
				try {
					const packedTeam = Teams.pack(Teams.import(team));
					console.log(packedTeam);
					process.exit(0);
				} catch (e) {
					console.error(e);
					process.exit(1);
				}
			});
		}
		break;
	case 'export-team':
		{
			build();
			const Teams = require('./dist/sim/teams').Teams;
			const Streams = require('./dist/lib/streams');
			const stdin = Streams.stdin();

			readTeam(stdin).then(team => {
				try {
					const exportedTeam = Teams.export(Teams.import(team));
					console.log(exportedTeam);
					process.exit(0);
				} catch (e) {
					console.error(e);
					process.exit(1);
				}
			});
		}
		break;
	default:
		console.error('Unrecognized command: ' + cli.positionals[0]);
		console.error('Use `pokemon-showdown help` for help');
		process.exit(1);
	}
}
